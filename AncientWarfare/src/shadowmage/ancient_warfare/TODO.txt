TODO before first alpha release:
read: http://accidentalnoise.sourceforge.net/minecraftworlds.html
http://mrl.nyu.edu/~perlin/noise/
http://gafferongames.com/networking-for-game-programmers/what-every-programmer-needs-to-know-about-game-networking/
http://en.wikipedia.org/wiki/Trajectory_of_a_projectile
http://gamedev.stackexchange.com/questions/17467/calculating-velocity-needed-to-hit-target-in-parabolic-arc  (its wrong...)

GENERAL
* move world-gen base config from AncientWarfare.cfg into /AWConfig/AWWorldGen.cfg
* change inventoryTools to manipulate containers as well

PRE-VEHICLE TEST RELEASE
* add vehicles
    -- models
    -- model-textures
    -- renders
    -- animations
    -- armor model...yay...blearghh...
* add ammos
    -- model-textures
    -- renders

VEHICLES
* find a good method for battering ram block damage (take point-hit, and simply do a 3D x on it?)
* add ammo types
* add upgrade types
* add armor types
* onHit client-side animation (can use the client-side health update method to trigger on - health updates)
* final vehicle gui will need slots that only accept stack size 1 and that validate against the vehicles valid<whatever type> list
* remove old targetPos code...
* fix rotation yaw bounding (prev rotation not lining up with current rotation)
* fix catapult and ballista models--flags need to be seperate pieces, not attached to the base (so they can use custom textures)
* create rockets (will require some hackery for their flight dynamics)
         
GUI FRAMEWORK
* add mouse-wheel interaction to scroll-bar
* add tooltip functionality to elements (optional tooltip rendering, if enabled on the element)
* add String label to checkboxes (optional)
* create basic GuiString element. has options for color, hover-color, callBackOnClick, drawShadow, drawCentered 
* rework all structure GUIs to include new bling!! (scroll areas, etc...)
* put quaded texture rendering someplace central...
* so...slots display position is client only...use that to move slots off screen (or use that in a scrollable area somehow?)

TESTING
* test structure loot weighting
* test structure weighting
* test structure underground buildings (dungeons)
* test structure submerged code
* test vehicle armor damage reduction

TEMPLATES

SCANNER

STRUCTURE BUILDING

WORLD GEN STUFF
* handle structure spawning in cave dimensions (test for hasSky? and disallow non-dungeon structures?)
* don't spawn stuff in X blocks of spawn (config setting)

STRUCTURE EDITOR
* add selection ability (clipboard/copy/paste)

COMPLEXES
* features--
        -min width
        -max widht
        -min length
        -max length
        -amount of terrain leveling to do (will level or fill-in and replace top-blocks)
        -list of structures w/min spacing around the structure
                -min spacing around the structure
                -max # of that structure
                -min # of that structure
        -list of acceptable biomes (or unnaceptable biomes)
        -# of structures in a 'city block' (min/max) (determines road frequency)
        -size of a 'city block' (min/max)
        -layout type (grid, staggered grid, haphazard)
        -wall types
        -team override for structures within
        -road width
        -ability to specify a basic template??
        -will have full biome-block swapping in-place for all structures AND walls
-- all structures will have fill-under/backfill below them, no matter the amount of terraforming
-- walls wil be placed slightly inside of terrain leveling bounds
-- outer leveling bounds will use a stepped approach, out to a certain radius/height...

SURVIVAL MODE STRUCTURE BUILDING
* create drafting workstation
* single-use item scanner--cannot add to world gen, only add to survival/creative mode
* make sure survival ticked builder will not clear or level.  struct BB needs validated for clear before being built
* builder item will carry an md5 of original structure, compare before starting construction..?
* use survival flag for survival drafting table structureSelection...(from structureClientInfo in client store)

BASIC DRAFTING STATION
* selection screen w/only survival eligible buildings available
* works much like drafting station from catmod (e.g. input box, compile blocks/resources into a finished item)
* create single-use builder item for output--stores struct data in NBT (basically, just a name and struct md5)....
* create single use scanner item for survival mode (item is consumed on successful scan/export)

ADVANCED DRAFTING STATION (editor)
* THDT

RESEARCH
* vehicle research system (initial only t0(rough) mats and t0(rough) vehicle variants)
* vehicle upgrade research (0 known until researched)
* materials research (2 known, rough quality wood/iron, other tiers/materials must be researched)
* npc research system (0 known until researched)
* civics research system (0 known until researched)

CRAFTING
    VEHICLE CRAFTING
        --at least 2 sizes of crafting area
        --will be multiblock structures that will render the in-progress vehicle being built
                will slowly add pieces over construction duration until finished constructing.
    NPC CRAFTING
    AMMO CRAFTING
    UPGRADE AND ARMOR CRAFTING
 
TWEAKS/OPTIMIZATION
* alter gen algorithm to account for rejection frequency on larger buildings (multiple retries for them?)
* optimize clearing code to not include inside bounds of structure
* optimize struct distance checking code, no longer needs to spiral, can use a double nested for/loop
* optimize, optimize, optimize.  Do massive timing/checking for generation times.
* change creative instant builder to be...not so instant.  break it up into ticks to smooth built-times to sub 10ms/tick
* figure out better way to handle ruins import (current is convert on run, manual copy and re-run)
* remove workaround for chest-overwrite-crash (test if it crashes on other entities as well?) 
* some ruins structures (one, jungle throne) appears offset -1Y
* editor GUI has some really ugly code to render chars....
* remove builder load/save from gameData...--it isn't used
* custom block placement code for creative/survival builders (set server block, manually relay to client--should 
        decrease overall network used from vanilla MC resending entire chunks..)

/*****************************************************************************************/
  float vAspect = this.mc.displayWidth/this.mc.displayHeight;
  int yPixels = this.mc.displayHeight;
  int newYPixels = yPixels - (int)(50.f*vAspect);
  float scaleY = (float)yPixels/(float)newYPixels;
  
  int xPixels = this.mc.displayWidth;
  int newXPixels = xPixels - 50;
  float scaleX = (float)xPixels/(float)newXPixels;
  
  GL11.glViewport(0, (int)(50*vAspect), newXPixels, newYPixels);
  
  GL11.glScalef(scaleX, scaleY, 1);
  for(int i = 0; i < 50; i++)
    {
    this.drawString(this.fontRenderer, "testString....aba;lkja;lhasdfasdfqwerqweradfadfaqwerqwetasdfawerqwerqasdfawerqwerqwerqasdfasdfasdfaqewrqwreghjkghuityuitftyertyfbgsrtwertsdfgasdfawreqwe", 0, i*10, 0xffffffff);
    }  
  GL11.glViewport(0, 0, this.mc.displayWidth, this.mc.displayHeight);

/*****************************************************************************************/

********************* DONE STUFF *************************         

/********** 03-11-13 **********/
* add config settings to mod init data
* remove debug spawner
* move spawner item over to new creative tab
* implement damage types...
* implement armor coding incl. damage reduction (should be fully implemented)
* implement vehicle weighting system (currently only armor has weight...the rest will require update on every inventory change)
* add new inventory-size setting code.InventoryHelper can be set when the vehicleType is read (or re-set to non-default sizes)
* make it so vehicles won't collide with arrows...
* implement ammo weight use for calculating shot max velocity
* restruct firing system:
    --initiate firing
    --onFiring animation update (onFiringUpdate())
    --animationComplete (launch missile)(callback to parent class to fire missiles/reset to fire next missile
    --onReload animation update (onReloadUpdate())
    --reset state
    
    --to launch a missile, call startMissileLaunch()
    --update state every tick in base entity
    --when animation is complete, call startLaunching()
    --onLaunchingUpdate() will be called that tick and every tick until setFinishedLaunching() is called
            --this allows you to fire multiple missiles
    --when finished launching missiles, call setFinishedLaunching(), which will start the cooldown and reload-animation updating process
* figure out accuracy calculation methods (when to apply accuracy)(probably apply it to the output angle and yaw (and speed) when spawning a missile)
    -- it will need to include a hook for soldier accuracy adjustments... (or accuracy needs to accomodate rider when being updated..trickier)
* fix entity hit detection for auto-aim...its borked
* tie acceleration to weight (base weight/ baseWeight for a leveled percentage to decrease speed by)
* test new adjustable size inventory
* figure out accuracy adjustment...its fubar..
* test new vehicle accuracy stuff
* test new weight based acceleration coding
* test arrow collision coding...
* fix shot aimYaw render not updating with mouseAim disabled
* add catapult animation.
* set catapult firing angle to 70'
* hmm..whats this...added the ballista?
/********** 03-12-13 **********/
* clean up team stuff
* set vehicles to not fire if their current ammo type is valid but empty (don't trigger/send firing animation start packet)
    





/********** 03-13-13 **********/
/********** 03-14-13 **********/
/********** 03-15-13 **********/
/********** 03-16-13 **********/
/********** 03-17-13 **********/
/********** 03-18-13 **********/
/********** 03-19-13 **********/
/********** 03-20-13 **********/