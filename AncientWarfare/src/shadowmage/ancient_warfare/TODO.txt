TODO before first alpha release:
read: http://accidentalnoise.sourceforge.net/minecraftworlds.html
http://mrl.nyu.edu/~perlin/noise/
http://gafferongames.com/networking-for-game-programmers/what-every-programmer-needs-to-know-about-game-networking/
http://en.wikipedia.org/wiki/Trajectory_of_a_projectile

GENERAL
* add basic GUI tooltip functionality -- GuiTooltip class (int x, int y, int w, int h, List<String> info)

VEHICLES
* start!!!
    ---base vehicle class will need:
        input proxy -- poll from here for info client side, server side is dummy class
            -- all input will be sent from the client (riding the vehicle) to the server.
                    server maintains state, relays input changes to all tracking clients (including sender)
        
        local ammoStats--maintains viable ammo types and counts
        local vehicleStats--
        per-entity pathfinder (possibly custom) for use with soldiers and player set waypoints
    ---INPUT MODEL
        
            
AMMO TYPES
---single instance referenced class, ala Item/Block.  Ammo types will have calls for onHit and a few
        other convenience methods
---new trajectory class and model--no drag (it wasn't realistic anyhow without including BC)        
            

GUI FRAMEWORK
* add GuiStringScrollFrame (completely handles displaying of a list of strings w/ callback info
            for when a string is clicked with mouse, w/scroll bar and mouse-wheel interaction)
* add mouse-wheel interaction to scroll-bar
* enable float-based handle render positioning to scroll bar as well as float-based handle positioning
            will require polling raw (non-scaled) mouse position....       
* import updates to guicontadv... from MEIM               

TESTING
* test loot weighting
* test structure weighting
* test underground buildings
* test submerged code

TEMPLATES

SCANNER

STRUCTURE BUILDING

WORLD GEN STUFF
* handle structure spawning in cave dimensions (test for hasSky? and dissallow non-dungeon structures?)

STRUCTURE EDITOR
* add selection ability (clipboard/copy/paste)

COMPLEXES
* features--
        -min width
        -max widht
        -min length
        -max length
        -amount of terrain leveling to do (will level or fill-in and replace top-blocks)
        -list of structures w/min spacing around the structure
                -min spacing around the structure
                -max # of that structure
                -min # of that structure
        -list of acceptable biomes (or unnaceptable biomes)
        -# of structures in a 'city block' (min/max) (determines road frequency)
        -size of a 'city block' (min/max)
        -layout type (grid, staggered grid, haphazard)
        -wall types
        -team override for structures within
        -road width
        -ability to specify a basic template??
        -will have full biome-block swapping in-place for all structures AND walls
-- all structures will have fill-under/backfill below them, no matter the amount of terraforming
-- walls wil be placed slightly inside of terrain leveling bounds
-- outer leveling bounds will use a stepped approach, out to a certain radius/height...


SURVIVAL MODE STRUCTURE BUILDING
* create drafting workstation
* single-use item scanner--cannot add to world gen, only add to survival/creative mode
* make sure survival ticked builder will not clear or level.  struct BB needs validated for clear before being built
* builder item will carry an md5 of original structure, compare before starting construction..?
* use survival flag for survival drafting table structureSelection...(from structureClientInfo in client store)

BASIC DRAFTING STATION
* selection screen w/only survival eligible buildings available
* works much like drafting station from catmod (e.g. input box, compile blocks/resources into a finished item)
* create single-use builder item for output--stores struct data in NBT (basically, just a name and struct md5)....
* create single use scanner item for survival mode (item is consumed on successful scan/export)

ADVANCED DRAFTING STATION (editor)
* THDT

RESEARCH
* THDT
- vehicles can be built with different base components, which help determine the outcome characteristics
        of the vehicle.  Such as using raw wood, fine wood, processed wood, ironshod wood, or iron channel
        as base construction materials.  Each grade of material will help determine the base stats of the
        vehicle (health, range modifier, damage done on hit, speed/weight), as well as secondary stats (i.e.
        number of upgrade slots in the vehicle and upgrade points available for customization during construction)
        add 'imbued' versions of these materials, each level of imbue will decrease some of the drawbacks for using 
        higher-tier materials.  Imbued versions are created by combining various materials with the regular version
        --such as combining with redstone for a t1 imbue, glowstone for a t2 imbue, both for t3 imbue.  Highest
        level imbue will require glowstone, redstone, and ender pearls. (7 total levels of imbue)
-- GUI --  Render full-screen background image.  On top of that, render mid-ground image of current position in research map.
        On top of that, render a border to clean up edges.  Render mid-ground at .75f brightness, if over a control spot, render that
        control spot at 1.f brightness.  Research map has list of control spots which keep internal coords.  Mid-ground tex
        is recomputed every time screen changes (as a partial texture of the full texture)
 
TWEAKS/OPTIMIZATION
* alter gen algorithm to account for rejection frequency on larger buildings (multiple retries for them?)
* optimize clearing code to not include inside bounds of structure
* optimize struct distance checking code, no longer needs to spiral, can use a double nested for/loop
* optimize, optimize, optimize.  Do massive timing/checking for generation times.
* change creative instant builder to be...not so instant.  break it up into ticks to smooth built-times to sub 10ms/tick
* figure out better way to handle ruins import (current is convert on run, manual copy and re-run)
* remove workaround for chest-overwrite-crash (test if it crashes on other entities as well?) 
* some ruins structures (one, jungle throne) appears offset -1Y
* editor GUI has some really ugly code to render chars....
* remove builder load/save from gameData...--it isn't used
* custom block placement code for creative/survival builders (set server block, manually relay to client--should 
        decrease overall network used from vanilla MC resending entire chunks..)


/*****************************************************************************************/
public class MyWorldData extends WorldSavedData 
{

final static String key = "my.unique.string";

// Fields containing your data here

public static MyWorldData forWorld(World world) 
    {
    // Retrieves the MyWorldData instance for the given world, creating it if necessary
    MapStorage storage = world.perWorldStorage;
    MyWorldData result = (MyWorldData)storage.loadData(MyWorldData.class, key);
    if (result == null) 
        {
        result = new MyWorldData();
        storage.setData(key, result);
        }
    return result;
    }
}
/*****************************************************************************************/


********************* DONE STUFF *************************

/****************************************FIRST TEST RELEASE****************************************/
* store template lines in structure
* break template lines into byte chunks to send to client
* send template byte chunks to client for entire structure
* composite byte chunks into structure on client side
* figure out multi-line text box...
* remove unused fields (chunkDistance, chunkAttempts)
* ohh..and add editor...
/********** 02-11-13 **********/
* auto-forced chunkloading for builder blocks
* remove name= line from templates, only use internally in structure/code (set from filename, upon load)
* on load, validate struct name for uniqueness
* ensure that builders will not crash/corrupt world if they are loaded with a template
      that has changed after they were fist placed.  save an md5 of the file into the processedStructure
      save that md5 out to the builder.  when builder is loaded, check saved md5 versus the passed-in structure
* add counting/ref mechanism for structures, to know which are editable, disallow editing if locked/in-use
* don't close GUI on save, only on discard
* add shift/invert option to config and items--global (does not effect scanners, due to client-server config differences, could probably synch config from server-client onLogin)
* advanced setup gui, set values on init according to existing values in container
* add clear/reset button to GUI, in case someone wants to ditch a scan
* fix ticked builder block available in creative inventory
* add more concise chat message as to what is going on when it is used (step _ of 4)
* direct builder has some issues with BB not clearing on client-side when the struct is cleared...
* direct builder scanning BB not rendering...
* remove creative flag--all will be available
* exporter now can convert entire structure to lines (uses this before writing)....
* scanner now sets template lines into freshly scanned buildings (for use of edit prior to save)...
* add advanced button to enable editing prior to first save
        --it will technically export with include
        --and then force-open the editor GUI with the just
        --exported structure...
* clean up various bugs from the days work at work... pt1
* clean up file transmission, it leaves 'null' lines at the end of the file (bugs from the day, pt2)
* clean up directBuilder scan BB rendering and item-clearing (bugs from the day, pt3)
* clean up a few chunkloading related bugs (bugs from the day, pt4)
* add builderTE/block onRemove code to release tickets...
/********** 02-12-13 **********/
* enforce air-zero rule (hard-coded, non-replaceable)
* rework guiContainerAdvanced to include fully custom button and text-box handling
/********** 02-13-13 **********/
* rework worldgen/structures slightly to allow for overrides from world-gen file to globally effect structures 
        as/after they are loaded (functions as a complete overrride without touching the orig structures values)
* add save ability to world-gen config file--should allow for in-game addition of structures (values are all final however, cannot be edited)
* add leveling/clearing/overhang overrides to worldgenstructentry
* move generated stucture maps into world.perWorldStorage (see notes...)
* enable value/weight settings for structure export
* enable add-to-world-gen for newly created structures (w/ given world-gen values)...
* check openEditors list instead of edit-flag
* move gen structure maps back into AWsaved data...NFC how MC saved file works...
* test world-gen export
* check overrides for structure for biome settings....
/********** 02-14-13 **********/
* add more info to genstructmap, to be able to recreate the bb for that struct...
* check nearby chunks in generatedMap for structure bb's, make sure bb's will not overwrite...
            should probably be called in attemptGenerateAt<surface/subsurface>.. need to store old struct buildPos
            in the gen struct map (stored as an offset from chunkPos (as bytes))
* add text to scanner GUI for weight, value, unique
* only display world-gen export options if world-gen output is enabled
* add reject message display if attempting to open a locked structure...
* validate struct before transmit to save
* don't close gui on save...somehow display a message if saved sucessfully?
* add method to 'lock' structure when editing, so no other player could edit the same struct
            and release when no longer in use..so it can be built, etc...
* add dirty flag to editor, so it won't retransmit template unless it has been edited
* update textFieldAdvanced number handling--it should now allow control input, but still only allow numerical input
* add getIntVal and getFloatVal to textFieldAdvanced
* change template extension--enable it in config properties
* test that structBBs didn't get screwed by using min/max on them
* add home, pgUp, pgDwn, end functionality to editor
* add mouse input to editor
* find better placement for error msgs...
* fix up bb collision code...it..was terrible...
* fix up some of the world-gen override code that wasn't quite overridden...it should now function reliably....
* find better manner of handling overrides
* test that static air rule works properly
* test structure BB collision code...
* test world gen overrides...
/********** 02-15-13 **********/
* add clearing/leveling code to the structureBB collision test...
* enable decorative structures (value 0)
* add some null checks to container/guis...mostly there, but probably still missing a few
* add method to retrieve top block between bounds..
/********** 02-16-13 **********/
* fix up leveling check--it is not checking bounds properly
        added debug test code to instant-builder, needs thorough testing and validation
        using this debug code...
* clearance validation code is still a bit....off..        
/********** 02-20-13 **********/
* rework all GUIs to enable new IGuiElement code and style...rewrite
            GuiTextFieldAdvanced, from the ground up... (yes, painful)            
/********** 02-25-13 **********/
* prep vehicle work
/********** 02-26-13 **********/
* add renderManager, methods to register vehicle renders            
/********** 02-27-13 **********/
* basic internal client/server comms. need a reliable vehicle channel. see: container networking
* prep work on vehicle movement
/********** 02-28-13 **********/
* vehicles can move!
/********** 03-01-13 **********/
* vehicle type number--used to reference for spawning and renders
* subclass for every vehicle (use render# on rendering, run through renderManager--low overhead)   
            