TODO before first alpha release:
read: http://accidentalnoise.sourceforge.net/minecraftworlds.html
http://mrl.nyu.edu/~perlin/noise/
http://gafferongames.com/networking-for-game-programmers/what-every-programmer-needs-to-know-about-game-networking/
http://en.wikipedia.org/wiki/Trajectory_of_a_projectile
http://gamedev.stackexchange.com/questions/17467/calculating-velocity-needed-to-hit-target-in-parabolic-arc


GENERAL
* add basic GUI tooltip functionality -- GuiTooltip class (int x, int y, int w, int h, List<String> info)
* move world-gen base config from AncientWarfare.cfg into /AWConfig/AWWorldGen.cfg
* add keybind config setting to options gui

VEHICLES
* implement vehicle weighting system (should it include upgrades, and ammo in bay)
* tie acceleration to weight
* figure out accuracy calculation methods (when to apply accuracy)(probably apply it to the output angle and yaw when spawning a missile)
* upgrade system
* implement armor system
* vehicle research system
* fix entity hit detection for auto-aim...its borked
            
AMMO TYPES 
* import stone ammo model
* create more ammo types

GUI FRAMEWORK
* add GuiStringScrollFrame (completely handles displaying of a list of strings w/ callback info
            for when a string is clicked with mouse, w/scroll bar and mouse-wheel interaction)
* add mouse-wheel interaction to scroll-bar
* enable float-based handle render positioning to scroll bar as well as float-based handle positioning
            will require polling raw (non-scaled) mouse position....    

TESTING
* test loot weighting
* test structure weighting
* test underground buildings (dungeons)
* test submerged code

TEMPLATES

SCANNER

STRUCTURE BUILDING

WORLD GEN STUFF
* handle structure spawning in cave dimensions (test for hasSky? and disallow non-dungeon structures?)

STRUCTURE EDITOR
* add selection ability (clipboard/copy/paste)

COMPLEXES
* features--
        -min width
        -max widht
        -min length
        -max length
        -amount of terrain leveling to do (will level or fill-in and replace top-blocks)
        -list of structures w/min spacing around the structure
                -min spacing around the structure
                -max # of that structure
                -min # of that structure
        -list of acceptable biomes (or unnaceptable biomes)
        -# of structures in a 'city block' (min/max) (determines road frequency)
        -size of a 'city block' (min/max)
        -layout type (grid, staggered grid, haphazard)
        -wall types
        -team override for structures within
        -road width
        -ability to specify a basic template??
        -will have full biome-block swapping in-place for all structures AND walls
-- all structures will have fill-under/backfill below them, no matter the amount of terraforming
-- walls wil be placed slightly inside of terrain leveling bounds
-- outer leveling bounds will use a stepped approach, out to a certain radius/height...


SURVIVAL MODE STRUCTURE BUILDING
* create drafting workstation
* single-use item scanner--cannot add to world gen, only add to survival/creative mode
* make sure survival ticked builder will not clear or level.  struct BB needs validated for clear before being built
* builder item will carry an md5 of original structure, compare before starting construction..?
* use survival flag for survival drafting table structureSelection...(from structureClientInfo in client store)

BASIC DRAFTING STATION
* selection screen w/only survival eligible buildings available
* works much like drafting station from catmod (e.g. input box, compile blocks/resources into a finished item)
* create single-use builder item for output--stores struct data in NBT (basically, just a name and struct md5)....
* create single use scanner item for survival mode (item is consumed on successful scan/export)

ADVANCED DRAFTING STATION (editor)
* THDT

RESEARCH
* research gui--base background GUI with scrollable viewport.  viewport will consist of a dummy GUI class that will have 
        its methods called by the parent gui.  parent will call drawScreen, handleMouseInput, and handleKeyInput.  mouse input coords will
        need to be scaled and adjusted (truncated) to the display region and only called if mouse is in the viewport region.
-- GUI --  Render full-screen background image.  On top of that, render mid-ground image of current position in research map.
        On top of that, render a border to clean up edges.  Render mid-ground at .75f brightness, if over a control spot, render that
        control spot at 1.f brightness.  Research map has list of control spots which keep internal coords.  Mid-ground tex
        is recomputed every time screen changes (as a partial texture of the full texture)
 
TWEAKS/OPTIMIZATION
* alter gen algorithm to account for rejection frequency on larger buildings (multiple retries for them?)
* optimize clearing code to not include inside bounds of structure
* optimize struct distance checking code, no longer needs to spiral, can use a double nested for/loop
* optimize, optimize, optimize.  Do massive timing/checking for generation times.
* change creative instant builder to be...not so instant.  break it up into ticks to smooth built-times to sub 10ms/tick
* figure out better way to handle ruins import (current is convert on run, manual copy and re-run)
* remove workaround for chest-overwrite-crash (test if it crashes on other entities as well?) 
* some ruins structures (one, jungle throne) appears offset -1Y
* editor GUI has some really ugly code to render chars....
* remove builder load/save from gameData...--it isn't used
* custom block placement code for creative/survival builders (set server block, manually relay to client--should 
        decrease overall network used from vanilla MC resending entire chunks..)


MODS LIST FOR NEXT WORLD (147)
Mystcraft
Thaumcraft
Railcraft
--steves carts
Industrialcraft
Buildcraft
Redpower
--forestry
--thermal expansion
--portal gun

/*****************************************************************************************/
public class MyWorldData extends WorldSavedData 
{

final static String key = "my.unique.string";

// Fields containing your data here

public static MyWorldData forWorld(World world) 
    {
    // Retrieves the MyWorldData instance for the given world, creating it if necessary
    MapStorage storage = world.perWorldStorage;
    MyWorldData result = (MyWorldData)storage.loadData(MyWorldData.class, key);
    if (result == null) 
        {
        result = new MyWorldData();
        storage.setData(key, result);
        }
    return result;
    }
}



/*****************************************************************************************/
  float vAspect = this.mc.displayWidth/this.mc.displayHeight;
  int yPixels = this.mc.displayHeight;
  int newYPixels = yPixels - (int)(50.f*vAspect);
  float scaleY = (float)yPixels/(float)newYPixels;
  
  int xPixels = this.mc.displayWidth;
  int newXPixels = xPixels - 50;
  float scaleX = (float)xPixels/(float)newXPixels;
  
  GL11.glViewport(0, (int)(50*vAspect), newXPixels, newYPixels);
  
  GL11.glScalef(scaleX, scaleY, 1);
  for(int i = 0; i < 50; i++)
    {
    this.drawString(this.fontRenderer, "testString....aba;lkja;lhasdfasdfqwerqweradfadfaqwerqwetasdfawerqwerqasdfawerqwerqwerqasdfasdfasdfaqewrqwreghjkghuityuitftyertyfbgsrtwertsdfgasdfawreqwe", 0, i*10, 0xffffffff);
    }  
  GL11.glViewport(0, 0, this.mc.displayWidth, this.mc.displayHeight);

/*****************************************************************************************/


********************* DONE STUFF *************************

         
/********** 02-25-13 **********/
* prep vehicle work
/********** 02-26-13 **********/
* add renderManager, methods to register vehicle renders            
/********** 02-27-13 **********/
* basic internal client/server comms. need a reliable vehicle channel. see: container networking
* prep work on vehicle movement
/********** 02-28-13 **********/
* vehicles can move!
/********** 03-01-13 **********/
* vehicle type number--used to reference for spawning and renders
* subclass for every vehicle (use render# on rendering, run through renderManager--low overhead)   
/********** 03-02-13 **********/
* work on getting ammo/missiles working
/********** 03-03-13 **********/
* fully implement missile ballistics
* begin working on siege-engine missile aiming
/********** 03-04-13 **********/
* more work on siege-engine aiming.  Mostly worked out, need to flesh out vehicles more fully.
* vehicle upgrades onInventoryChanged send upgradeNumbersList to tracking clients and call updateUpgradeStats
* add vehicle ammo count updating    
* NBT save/load stuff for firingHelper, moveHelper, ammoHelper             
* fix arrow model to use point of head as its position point         
* add arrow persistent entity coding
/********** 03-05-13 **********/
* convert vehicles over to use interface typing.  they now consist of two parts, the entity (for animations and other local variables), and the type (defines statistics)
* re-implement auto-aiming to include vehicles that use power instead of pitch
* bit of work on arrow persistence/hit point/sticking in the ground
* add wood material and first-pass statistics to it.
/********** 03-06-13 **********/
* implement iterative algorithm to find best guess power for auto-aim, iteration count set by client-config setting (<20000ns for 20 iterations avg on dev comp)
* add basic client-side settings GUI, needs tons of work
* add advanced overlay rendering (yaw line + trajectory)
* fix hit point of persistent arrows (they seem to use one of only a few hit-points on the block)
* fix rendering of arrows (rotation goes all screwy at some angles, spins) 
* fix load/save of persistent arrows (they go vertical upon reload and fall to the ground)
* fix depth rendering on advanced overlay   
* import updates to guicontadv... from MEIM      
* add basic scrollable area using viewport coding. needs much work.
/********** 03-07-13 **********/
* work on setting up elements on scrollable area (working aside from Y render issues (its too far north)
* fix scrollable area render positioning. it now positions elements correctly
* fix scrollable area element positioning, as well as mouse-input.  It now scrolls elements properly 

/********** 03-08-13 **********/
/********** 03-09-13 **********/
/********** 03-10-13 **********/