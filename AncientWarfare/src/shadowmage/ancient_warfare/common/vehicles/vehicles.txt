Vehicles:

IVehicleType -- basic interface for what is necessary to describe a vehicle
VehicleTypeBase -- base class implementing above interface.
        -- there will should be one VehicleTypeBase subclass for each vehicle description
VehicleBase -- the base entity that all vehicles will use.  it will implement most methods (through helpers for many)
    to handle the basics of vehicles (input, movement, updates).  The entity class will also handle the animations
    that will be applied to the model.
    
A vehicleType may be used in multiple Vehicle entity classes, provided they are similar enough (same model, very similar performance, same ammo/upgrades) 
    
Registry Process:
Create VehicleType, extends VehicleType)
Create VehicleVarsHelper, extends VehicleVarsHelper, set VehicleType to return that specific type;
Create static instance of type in VehicleType
        --static instance creation will trigger registry of item and mapping of type
Create Vehicle Model
Create VehicleRender, extends RenderVehicleBase
Register VehicleRender in RenderRegistry
    
    
Vehicle stats will be calculated thusly:
stat = base stat taken from VehicleType for the vehicle
stat *= materialModifier for that stat, if any (generally percentage based)   
stat += any modifiers from upgrades for that stat, if any
return stat;




power using vehicles (use power to determine shot range): 
catapult
trebuchet


pitch using vehicles (use pitch to determine shot range):
hwacha
ballista/turret
cannon