<Templates>
  <Info>
    <Filter>Java-file|*.java</Filter>
    <DefaultExtension>java</DefaultExtension>
  </Info>
  <Template>
    <Prefix></Prefix>
    <Content>
      <!--Get rid of that ToStringCrap-->
      <![CDATA[
@using Techne.Plugins.Interfaces;
@using Techne.Model;
@functions
{
  string ToString(object o)
  {
    return o.ToString().Replace(',', '.').Replace(' ', '_');
  }
  double ToRad(double p)
  {
    return p * Math.PI / 180;
  }
  IEnumerable<string> GetFQN(ITechneVisual visual, bool first = false)
  {
    if (visual.Parent != null && !first)
    {
      foreach (var name in GetFQN(visual.Parent, true))
        yield return name;
    }
    yield return visual.Name;
  }
}
@helper CreateSetTexutreOffset(ITechneVisual visual)
{
  if (visual is TechneVisualCollection)
  {
    foreach (ITechneVisual child in ((TechneVisualCollection)visual).Children)
    {
      @CreateSetTexutreOffset(child);
    }
  }
  else if (visual.Parent != null)
  {
    var name = string.Join(".", GetFQN(visual));

    @:setTextureOffset("@ToString(name)", @visual.TextureOffset.X, @visual.TextureOffset.Y);
  }
}
@helper CreateConstructor(ITechneVisual visual)
{
  if (visual is ITechneVisualCollection && ((ITechneVisualCollection)visual).ChildrenInheritProperties)
  {
    @:@ToString(visual.Name) = new ModelRenderer(this, "@ToString(visual.Name)");
    @:@(ToString(visual.Name)).setRotationPoint(@(ToString((float)visual.Position.X))F, @(ToString((float)visual.Position.Y))F, @(ToString((float)visual.Position.Z))F);
    @:setRotation(@(ToString(visual.Name)), @(ToString((float)Math.Round(ToRad(visual.RotationX), 7)))F, @(ToString((float)Math.Round(ToRad(visual.RotationY), 7)))F, @(ToString((float)Math.Round(ToRad(visual.RotationZ), 7)))F);
    @:@(ToString(visual.Name)).mirror = true;
    
    foreach (ITechneVisual child in ((ITechneVisualCollection)visual).Children)
    {
      @CreateConstructor(child)
    }
    
    if (visual.Parent != null)
    {
      @:@(ToString(visual.Parent.Name)).addChildModelRenderer(@ToString(visual.Name));
    }
  }
  else if (visual is ITechneVisualCollection)
  {
    foreach (ITechneVisual child in ((ITechneVisualCollection)visual).Children)
    {
      @CreateConstructor(child)
    }
  }
  else
  {
    //not quite sure if that's actually working
    if(visual.IsMirrored)
    {
      @:@(ToString(visual.Name)).mirror = true;
    }
    
    if (visual.Parent == null || visual.Parent is ITechneVisualCollection && !((ITechneVisualCollection)visual.Parent).ChildrenInheritProperties)
    {
      @:@ToString(visual.Name) = new ModelRenderer(this, @visual.TextureOffset.X, @visual.TextureOffset.Y);
      @:@(ToString(visual.Name)).addBox(@(ToString((float)visual.Offset.X))F, @(ToString((float)visual.Offset.Y))F, @(ToString((float)visual.Offset.Z))F, @(visual.Width), @(visual.Length), @(visual.Height));
      @:@(ToString(visual.Name)).setRotationPoint(@(ToString((float)visual.Position.X))F, @(ToString((float)visual.Position.Y))F, @(ToString((float)visual.Position.Z))F);
      @:@(ToString(visual.Name)).setTextureSize(@visual.TextureSize.X, @visual.TextureSize.Y);
      @:@(ToString(visual.Name)).mirror = true;
      @:setRotation(@(ToString(visual.Name)), @(ToString((float)Math.Round(ToRad(visual.RotationX), 7)))F, @(ToString((float)Math.Round(ToRad(visual.RotationY), 7)))F, @(ToString((float)Math.Round(ToRad(visual.RotationZ), 7)))F);
    } 
    else
    {
      @:@(visual.Parent.Name).addBox("@visual.Name", @((float)visual.Offset.X)F, @((float)visual.Offset.Y)F, @((float)visual.Offset.Z)F, @(visual.Width), @(visual.Length), @(visual.Height));
    }
    if(visual.IsMirrored == true)
    {
      @:@(ToString(visual.Name)).mirror = false;
    }
  }
}
@helper CreateRender(ITechneVisual visual)
{
  if (visual is ITechneVisualCollection && !((ITechneVisualCollection)visual).ChildrenInheritProperties)
  {
    foreach (ITechneVisual child in ((ITechneVisualCollection)visual).Children)
    {
      @CreateRender(child)
    }
  }
  else
  {
    @:@(ToString(visual.Name)).render(f5);
  }
}
@helper CreateFields(ITechneVisual visual)
{
  if (visual is ITechneVisualCollection && !((ITechneVisualCollection)visual).ChildrenInheritProperties)
  {
    foreach (ITechneVisual child in ((ITechneVisualCollection)visual).Children)
    {
      @CreateFields(child)
    }
  }
  else
  {
    @:ModelRenderer @(ToString(visual.Name));
  }
}
@helper CreateExport(ITechneVisual visual)
{
@:part=@(visual.Name),null,@(ToString(visual.Position.X)),@(ToString(visual.Position.Y)),@(ToString(visual.Position.Z)),@(ToString((float)Math.Round(ToRad(visual.RotationX), 7))),@(ToString((float)Math.Round(ToRad(visual.RotationY), 7))),@(ToString((float)Math.Round(ToRad(visual.RotationZ), 7))),@(ToString(visual.TextureOffset.X)),@(ToString(visual.TextureOffset.Y)),@(ToString(visual.TextureSize.X)),@(ToString(visual.TextureSize.X))
@:box=@(visual.Name),@(ToString((float)visual.Offset.X)),@(ToString((float)visual.Offset.Y)),@(ToString((float)visual.Offset.Z)),@(visual.Width),@(visual.Length),@(visual.Height)
}
  @foreach (ITechneVisual visual in @Model.Geometry)
  {
    @CreateExport(visual)	
  }  
]]>
    </Content>
  </Template>
</Templates>
