/**
   Copyright 2012 John Cummens (aka Shadowmage, Shadowmage4513)
   This software is distributed under the terms of the GNU General Public License.
   Please see COPYING for precise license information.

   This file is part of Ancient Warfare.

   Ancient Warfare is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   Ancient Warfare is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with Ancient Warfare.  If not, see <http://www.gnu.org/licenses/>.


 */
package shadowmage.ancient_warfare.common.vehicles.stats;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import shadowmage.ancient_warfare.common.registry.VehicleAmmoRegistry;
import shadowmage.ancient_warfare.common.registry.entry.VehicleAmmo;
import shadowmage.ancient_warfare.common.registry.entry.VehicleAmmoEntry;
import shadowmage.ancient_warfare.common.vehicles.VehicleBase;

public class AmmoStats
{

private VehicleBase vehicle;

/**
 * list of ammo types that have to be enabled by upgrades
 */
private ArrayList<VehicleAmmoEntry> validAmmoTypes = new ArrayList<VehicleAmmoEntry>();

public Map<Integer, VehicleAmmoEntry> localAmmoTypeMap = new HashMap<Integer, VehicleAmmoEntry>();

public AmmoStats(VehicleBase vehicle)
  {
  this.vehicle = vehicle;
  }

/**
 * initial registerAmmoType, called during instance construction
 * @param globalType
 */
public void addAmmoType(int globalType)
  {
  VehicleAmmo ammo = VehicleAmmoRegistry.instance().getEntryFor(globalType);
  if(ammo==null)
    {
    return;
    }
  VehicleAmmoEntry entry = new VehicleAmmoEntry(ammo);
  this.validAmmoTypes.add(entry);
  this.localAmmoTypeMap.put(this.localAmmoTypeMap.size(), entry);
  }

public VehicleAmmoEntry getAmmoGlobal(int globalType)
  {
  for(VehicleAmmoEntry entry : this.validAmmoTypes)
    {
    if(entry.getInfo().type==globalType)
      {
      return entry;
      }
    }
  return null;
  }

/**
 * return ammoType by localType
 * @param localType
 * @return
 */
public VehicleAmmoEntry getAmmo(int localType)
  {
  return this.localAmmoTypeMap.get(localType);
  }

/**
 * used by vehicle.inventory.isItemValidForSlot
 * @param id
 * @param dmg
 * @return
 */
public boolean isValidAmmo(int id, int dmg)
  {
  for(VehicleAmmoEntry entry : this.validAmmoTypes)
    {
    if(entry.getItemID().equals(id, dmg))
      {
      return true;
      }
    }
  return false;
  }

}
